Solution 1:

Time complexity: O(logn) ---  Binary search on input array
Space complexity: O(1)  --- no new data structure created

class Solution:
    def Find(self, nums):
        low = 0
        high = len(nums)-1
        while low <= high:
            mid = low + (high-low) //2
            if nums[mid] - mid == 1:
                low = mid + 1
            else:
                high = mid - 1
        return low + 1


obj = Solution()
arr = [1,2,3,4,6,7,8]
res = obj.Find(arr)
print(res)







Solution 2:

Time complexity: O(N) --- iterating through whole input array
Space complexity: O(1)  --- no new data structure created



class Solution:
	def find_missing_number(nums):
    		n = len(nums) + 1
    		total_sum = n * (n + 1) // 2
     		array_sum = sum(nums)
       		missing_number = total_sum - array_sum
    		return missing_number


obj = Solution()
numbers = [1, 2, 4, 5, 6]
missing = obj.find_missing_number(numbers)
print("The missing number from the sorted list is:", missing)